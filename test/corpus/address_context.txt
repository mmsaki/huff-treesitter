================
Address as opcode in macro body
================

#define macro GET_ADDRESS() = takes (0) returns (1) {
    push0 push0 address
}

---

(source_file
  (declaration
    (declaration_macro
      name: (identifier)
      takes_count: (number_decimal)
      returns_count: (number_decimal)
      (macro_body
        (opcode)
        (opcode)
        (opcode)))))

================
Address as interface primitive in event definition
================

#define event TestEvent1(address, uint256)

---

(source_file
  (interface
    (interface_event
      name: (identifier)
      parameters: (parameter_list
        (parameter
          (interface_primitives))
        (parameter
          (interface_primitives))))))

================
Address as interface primitive in function definition
================

#define function transfer(address to, uint256 amount) returns (bool)

---

(source_file
  (interface
    (interface_function
      name: (identifier)
      parameters: (parameter_list
        (parameter
          (interface_primitives)
          name: (identifier))
        (parameter
          (interface_primitives)
          name: (identifier)))
      returns: (parameter_list
        (parameter
          (interface_primitives))))))

================
Mixed context - address opcode in macro with address type in comment
================

#define macro TRANSFER(to_addr) = takes (2) returns (1) {
    // to_addr should be an address type
    <to_addr>     // [to, amount]
    address       // [caller, to, amount] - this should be opcode
    swap1         // [to, caller, amount]
    push0         // [0, to, caller, amount]
}

---

(source_file
  (declaration
    (declaration_macro
      name: (identifier)
      template_parameters: (identifier)
      takes_count: (number_decimal)
      returns_count: (number_decimal)
      (macro_body
        (comment
          (comment_line))
        (opcode
          (template_parameter_call
            template_name: (template_token)))
        (comment
          (comment_line))
        (opcode)
        (comment
          (comment_line))
        (opcode)
        (comment
          (comment_line))
        (opcode)
        (comment
          (comment_line))))))

================
Complex scenario with multiple address usages
================

#define event Transfer(address indexed from, address indexed to, uint256 amount)
#define function getAddress() external returns (address owner)

#define macro COMPLEX_ADDRESS_USAGE() = takes (0) returns (2) {
    address       // Get caller address (opcode)
    caller        // Another way to get caller (opcode)
    
    // Both of the above should be opcodes
    dup1
    push0 push0 address  // address opcode in sequence
}

---

(source_file
  (interface
    (interface_event
      name: (identifier)
      parameters: (parameter_list
        (parameter
          (interface_primitives)
          modifier: (modifier_indexed)
          name: (identifier))
        (parameter
          (interface_primitives)
          modifier: (modifier_indexed)
          name: (identifier))
        (parameter
          (interface_primitives)
          name: (identifier)))))
  (interface
    (interface_function
      name: (identifier)
      parameters: (parameter_list)
      returns: (parameter_list
        (parameter
          (interface_primitives)
          name: (identifier)))))
  (declaration
    (declaration_macro
      name: (identifier)
      takes_count: (number_decimal)
      returns_count: (number_decimal)
      (macro_body
        (opcode)
        (comment
          (comment_line))
        (opcode)
        (comment
          (comment_line))
        (comment
          (comment_line))
        (opcode)
        (opcode)
        (opcode)
        (opcode)
        (comment
          (comment_line))))))
