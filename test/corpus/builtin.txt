================
Builtin Function __BYTES
================

#define macro MAIN() = takes (0) returns (0) { 
  __BYTES("Hello World!")
}

---

(source_file
  (declaration
    (macro
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (string_literal))))))

================
Builtin Function __CODECOPY_DYN_ARG
================

#define macro MAIN() = takes (0) returns (0) {
  __CODECOPY_DYN_ARG(0x00, 0x20)
}

---

(source_file
  (declaration
    (macro
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (number)
          args: (number))))))

================
Builtin Function __ERROR
================

#define error PanicError()
#define macro MAIN() = takes (0) returns (0) { 
  __ERROR(PanicError)
}

---

(source_file
  (declaration
    (error
      name: (identifier)
      parameters: (parameter_list)))
  (declaration
    (macro
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (identifier))))))

================
Builtin Function __EVENT_HASH
================

#define event TestEvent()
#define macro MAIN() = takes (0) returns (0) { 
  __EVENT_HASH(TestEvent)
}

---

(source_file
  (declaration
    (event
      name: (identifier)
      parameters: (parameter_list)))
  (declaration
    (macro
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (identifier))))))

================
Builtin Function __FUNC_SIG
================

#define function myFunction() view returns ()
#define macro MAIN() = takes (0) returns (0) { 
  __FUNC_SIG(myFunction)
}

---

(source_file
  (declaration
    (function
      name: (identifier)
      parameters: (parameter_list)
      (visibility)
      parameters: (parameter_list)))
  (declaration
    (macro
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (identifier))))))

================
Builtin Function __LEFTPAD
================

#define fn MY_FUNC() = takes (0) returns (0) {
  __LEFTPAD(0x42)
}

---

(source_file
  (declaration
    (fn
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (number))))))

================
Builtin Function __RIGHTPAD
================

#define fn MY_FUNC() = takes (0) returns (0) {
  __RIGHTPAD(0x42)
}

---

(source_file
  (declaration
    (fn
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (number))))))

================
Builtin Function __codesize
================

#define fn MY_FUNC() = takes (0) returns (0) {
  __codesize(MACRO_NAME)
}

---

(source_file
  (declaration
    (fn
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (identifier))))))

================
Builtin Function __tablesize
================

#define fn MY_FUNC() = takes (0) returns (0) {
  __tablesize(SWITCH_TABLE)
}

---

(source_file
  (declaration
    (fn
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          table: (identifier))))))

================
Builtin Function __tablestart
================

#define fn MY_FUNC() = takes (0) returns (0) {
  __tablestart(SWITCH_TABLE)
}

---

(source_file
  (declaration
    (fn
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          table: (identifier))))))

================
Builtin Function __VERBATIM
================

#define macro MAIN() = takes (0) returns (0) { 
  __VERBATIM(0x0420)
}

---

(source_file
  (declaration
    (macro
      name: (identifier)
      takes_count: (number)
      returns_count: (number)
      (macro_body
        (builtin_function
          args: (number))))))
